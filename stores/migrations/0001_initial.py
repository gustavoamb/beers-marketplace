# Generated by Django 4.1.4 on 2024-08-30 01:54

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import phonenumber_field.modelfields
import stores.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.TextField(help_text="The product's name")),
                (
                    "description",
                    models.TextField(help_text="The product's description", null=True),
                ),
                ("photo", models.ImageField(upload_to="products")),
            ],
            options={
                "ordering": ["created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Promotion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=20)),
                ("description", models.CharField(max_length=200)),
                ("price", models.DecimalField(decimal_places=2, max_digits=19)),
                ("photo", models.ImageField(upload_to="promotions")),
            ],
            options={
                "ordering": ["created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Purchase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("CLAIMED", "Claimed"),
                            ("ACCEPTED", "Accepted"),
                            ("REJECTED", "Rejected"),
                            ("DELIVERED", "Delivered"),
                        ],
                        default="PENDING",
                        max_length=9,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="The purchase's total amount",
                        max_digits=19,
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        default=stores.models.generate_purchase_reference,
                        help_text="Reference string used to identify the transaction internally",
                        max_length=255,
                    ),
                ),
                (
                    "qr_scanned",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the Purchase's QR code has been scanned, this allows a Purchase to be claimed",
                    ),
                ),
                (
                    "gift_expiration_date",
                    models.DateTimeField(
                        default=stores.models.get_gift_expiration_date
                    ),
                ),
                ("message", models.TextField(null=True)),
                (
                    "commission_percentage",
                    models.DecimalField(
                        decimal_places=4,
                        default=0.0,
                        help_text="Commission percentage associated with the store at the time of payment",
                        max_digits=19,
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PurchaseHasProduct",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "quantity",
                    models.IntegerField(help_text="Number of products purchased"),
                ),
            ],
            options={
                "ordering": ["created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PurchaseHasPromotion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "quantity",
                    models.IntegerField(help_text="Number of promotions purchased"),
                ),
            ],
            options={
                "ordering": ["created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ScheduleDay",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "day",
                    models.IntegerField(
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "open_hour",
                    models.TimeField(
                        default=datetime.time(9, 0), help_text="Store's opening hours"
                    ),
                ),
                (
                    "close_hour",
                    models.TimeField(
                        default=datetime.time(11, 0), help_text="Store's closing hours"
                    ),
                ),
                (
                    "closed",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the store is closed or not that day",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Store",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.TextField(help_text="The store's name")),
                (
                    "description",
                    models.TextField(help_text="A description of the store"),
                ),
                (
                    "doc_type",
                    models.CharField(
                        choices=[("RIF", "RIF Number"), ("CI", "ID Number")],
                        max_length=3,
                        null=True,
                    ),
                ),
                ("doc_number", models.TextField(null=True)),
                (
                    "cover_photo_url",
                    models.TextField(help_text="URL for the store's cover photo"),
                ),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        max_length=128, region=None
                    ),
                ),
                (
                    "verified",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this store has been verified/approved by staff",
                    ),
                ),
                (
                    "contact_name",
                    models.TextField(
                        help_text="Name of the person attending when contacting the store",
                        null=True,
                    ),
                ),
                (
                    "contact_job",
                    models.TextField(
                        help_text="Occupation/position/job of the contact person in the store",
                        null=True,
                    ),
                ),
                (
                    "contact_phone",
                    models.TextField(
                        help_text="Phone of the contact person", null=True
                    ),
                ),
                (
                    "commission_percentage",
                    models.DecimalField(
                        decimal_places=4,
                        default=0.0,
                        help_text="Percentage of money Beers takes per sale",
                        max_digits=19,
                    ),
                ),
                (
                    "dispatch_code",
                    models.CharField(
                        help_text="Code used to verify purchase dispatchs",
                        max_length=5,
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="StoreHasProduct",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, help_text="The product's price", max_digits=19
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StoreReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("content", models.TextField(help_text="The review's content")),
                (
                    "rating",
                    models.IntegerField(
                        help_text="The rating given to the store by the user, is an integer between 0-5",
                        validators=[
                            django.core.validators.MinValueValidator(limit_value=0),
                            django.core.validators.MaxValueValidator(limit_value=5),
                        ],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserHasFavoriteStore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "store",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="stores.store"
                    ),
                ),
            ],
        ),
    ]
